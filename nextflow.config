includeConfig 'conf/base.config'

profiles {
  slurm {
    includeConfig 'conf/slurm.config'
  }
  gcp {
    includeConfig 'conf/gcp.config'
  }
  local {
    includeConfig 'conf/local.config'
  }
}


params {
    //Core Pipeline Settings
    help = false
    input_dir = "${projectDir}/input"
    output_dir = "${projectDir}/output"
     
    //Input Data Configuration
    slide_contains_prefix = "True"
    folder_is_slide = "False"
	quant_file_extension = ".tsv"
	quant_file_delimiter = "\\t"              // Tab-delimited '\\t' or comma ','
    bit_depth = "16-bit"                      // "16-bit" or "8-bit"
    qupath_object_type = 'DetectionObject'    // "CellObject" or "DetectionObject"
    
    //Marker and Feaute Settings
    nucleus_marker = "DAPI"
    housekeeping_marker = "S6"
    exclude_markers = "Arg1|BAD|B2M|CCAM5|CCR8|CD209|CTLA4|GATA3|Gal3|Gal9|GzB|Her2|ILT4|Ki67|PD1|PDL1|T-BET|TIGIT|TCF7|iNOS|CD103a|LAG3|HLAI|DAPI_R28|NKG7|TIM3|TenC|IDO"
    classifed_column_name = "Classification"
    plot_fraction = 0.25
    
    //Normalization Parameters
    override_normalization="boxcox"             // "minmax", "boxcox", "log", "quantile", "null"
    downsample_normalization_plots=0.5
    quantile_split = 1024

    // Optional scimap clustering
    run_get_leiden_clusters=false
    scimap_resolution=0.5

    //Data Splitting and Training
    holdout_fraction=0.1
    filter_out_junk_celltype_labels="??,?,0,Negative,Ignore*"
    minimum_label_count=20

    //Feature Selection
    min_rfe_nfeatures = 5
    max_rfe_nfeatures = 25

    // XGBoost Model Parameters
    max_xgb_cv = 5
    xgb_depth_start = 2
    xgb_depth_stop = 6
    xgb_depth_step = 3
    xgb_learn_rates = "0.1"

    // Prediction Settings
    predict_class_column = 'CellType'
    predict_le_encoder_file = "${params.output_dir}/models/classes.npy"
    predict_columns_to_export = 'Centroid X µm,Centroid Y µm,Image,CellTypePrediction'
    predict_cpu_jobs = 16

}

process {
    /*
     *  executor = 'slurm'         
     *   queue = 'cpu-short'
     *   memory = '60 GB'
     *   time = '24h'
     *   cpus = 1
     *}
    */
    withLabel: normalization_parallel {
        executor = 'local'
        memory = '8 GB'
        time = '2h'
    }

}

